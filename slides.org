#+title: Freenet Project: Leap over Censorship
#+language: en
#+startup: beamer
#+LaTeX_CLASS: beamer
#+LaTeX_CLASS_OPTIONS: [presentation]
#+LATEX_HEADER:\usepackage{beamerthemefreenet}
#+options: H:2 ^:nil
#+COLUMNS: %45ITEM %10BEAMER_env(Env) %10BEAMER_envargs(Env Args) %4BEAMER_col(Col) %8BEAMER_extra(Extra)
#+PROPERTY: BEAMER_col_ALL 0.1 0.2 0.3 0.4 0.5 0.6 0.7 0.8 0.9 0.0 :ETC
#+latex_header: \subtitle[The technical part of the solution for freedom of the press in the internet]{The technical part of the solution for freedom of the press in the internet}

* Why?

** Why Freenet?

#+BEGIN_QUOTE
I worry about my child and the Internet all the time, even though she's too young to have logged on yet. Here's what I worry about. I worry that 10 or 15 years from now, she will come to me and say 'Daddy, where were you when they took freedom of the press away from the Internet?'
--Mike Godwin, Electronic Frontier Foundation, [[https://w2.eff.org/Misc/EFF/quotes.eff.txt][“Fear of Freedom” (1995)]]
#+END_QUOTE

** Why now? Dark Times

#+BEGIN_QUOTE
“There is now no shield from forced exposure…The foundation of Groklaw is over…the Internet is over” --Groklaw, [[http://www.groklaw.net/article.php?story=20130818120421175][Forced Exposure (2013-08-20)]]
#+END_QUOTE

** Why now? A New Old Hope

- 1995: At a Crossroad: *Surveillance or Freedom*.
- 1999: *Freenet* starts.
- 2001: *9/11*. The war on terror starts.
- 2013: Snowden. Precious time to *turn back the wheel*.

* About
** What is Freenet?

#+BEGIN_QUOTE
Freenet is the technical part of the solution for freedom of the press in the internet.
#+END_QUOTE

** THE technical part? Other projects
***                                                               :B_columns:
    :PROPERTIES:
    :BEAMER_env: columns
    :END:
****                                                                  :BMCOL:
     :PROPERTIES:
     :BEAMER_col: 0.45
     :END:


***** Pure Transport                                     :B_block:
     :PROPERTIES:
     :BEAMER_env: block
     :END:

/e.g. Tor, I2P/

- No offline hosting
- vulnerable to DoS
- correlation attacks

#+latex: \small
/This killed the Black Goblin Market/

***** Hosting with cost                                             :B_block:
     :PROPERTIES:
     :BEAMER_env: block
     :END:

/e.g. TAHOE-LAFS, MaidSafe/

- Fixed storage: When it is full, it is full
- DoS-resistance? Spam-resistance? Cost?

/Good content often comes from small publishers./

****                                                                  :BMCOL:
     :PROPERTIES:
     :BEAMER_col: 0.45
     :END:

***** Pure messaging                                                :B_block:
     :PROPERTIES:
     :BEAMER_env: block
     :END:

/e.g. bitmessage, invisible.im/

- No publishing
- No offline hosting

***** Server-based                                                  :B_block:
     :PROPERTIES:
     :BEAMER_env: block
     :END:

/e.g. SecureDrop/

- Requires powerful infrastructure 
- DoS-able
- Timing attacks (correlation)

***** GNUnet?                                                       :B_block:
     :PROPERTIES:
     :BEAMER_env: block
     :END:

Good, but more filesharing than publishing.

** THE technical part? Freenet

***                                                               :B_columns:
    :PROPERTIES:
    :BEAMER_env: columns
    :END:
**** Communication                                            :B_block:BMCOL:
    :PROPERTIES:
    :BEAMER_col: 0.45
    :BEAMER_env: block
    :END:

- *persistent pseudonyms*
- *spam resistance* via WoT
- *multiple applications* (Sone, FMS, Freemail, FlogHelper, ...)

**** Publishing                                               :B_block:BMCOL:
    :PROPERTIES:
    :BEAMER_col: 0.45
    :BEAMER_env: block
    :END:

- *offline hosting* \\ Join, drop content, leave.
- *decaying storage* \\ lifetime depends on user demand

***                                                           :B_block:BMCOL:
    :PROPERTIES:
    :BEAMER_env: block
    :BEAMER_col: 0.97
    :END:

Proven track record of providing censorship resistant publishing and communication since 2000.



** The TECHNICAL part?
***                                                               :B_columns:
    :PROPERTIES:
    :BEAMER_env: columns
    :END:
**** Tech alone is not enough                                 :B_block:BMCOL:
    :PROPERTIES:
    :BEAMER_col: 0.45
    :BEAMER_env: block
    :END:

Complete blocking and surveillance is possible.

**** Politics alone is not enough                             :B_block:BMCOL:
     :PROPERTIES:
     :BEAMER_col: 0.45
     :BEAMER_env: block
     :END:

If surveillance and censorship are trivial, they will be done.

*** Tech and Politics                                         :B_block:BMCOL:
    :PROPERTIES:
    :BEAMER_env: block
    :BEAMER_col: 0.97
    :END:

Privacy technology provides the background on which politics can work: Making surveillance and censorship expensive and hard enough that we can win the political battle.

\vspace{0.2cm}

#+BEGIN_QUOTE
The NSA surveillance doesn’t scale. \\ -- Constanze Kurz (EuroPython 2014)
#+END_QUOTE


** Now Concrete

[[./screenshot-fproxy-wide.png]]

- 127.0.0.1:8888
- ssh -NL 8888:localhost:8888 <host>

** Who are we?

***                                                           :B_block:BMCOL:
    :PROPERTIES:
    :BEAMER_env: block
    :BEAMER_col: 0.6
    :END:

- 2 donation-funded part time developers: toad and xor.
- About a dozen free time developers.
- Some anonymous contributors.
- Communication mostly over IRC (=#freenet @ irc.freenode.net=) and FMS
  (in Freenet).

***                                                           :B_block:BMCOL:
    :PROPERTIES:
    :BEAMER_env: block
    :BEAMER_col: 0.35
    :END:

#+caption: Some Freenet developers at CTS4. From left to right: ArneBab, toad, leuchtkaefer and digger3.
[[file:freenet-cts4-20130930_135137.jpg]]

** Current State

\centering
[[file:screenshot-feedback-so-fast.png]]

** Current Stats

\centering
[[./fetchpull-1293-fetchplots10.png]]

** Project Summary

- Freenet provides essential features for freedom of press.
- Tech creates the background needed to win the political battle.
- Freenet was created 14 years ago and improved constantly.

* Applications
** Applications
***                                                                   :BMCOL:
    :PROPERTIES:
    :BEAMER_col: 0.45
    :END:
- File Hosting
- Site hosting
- Confidential Messaging
- DVCS
***                                                                   :BMCOL:
    :PROPERTIES:
    :BEAMER_col: 0.45
    :END:
- Email
- Microblogging
- Spam resistance
- Forums
** File Hosting

#+attr_latex: :width 0.8\textwidth
[[./screenshot-upload-file.png]]

/pastebin, file hoster, encrypted chunks, redundancy./

** Site Hosting
\centering
#+attr_latex: :width 0.8\textwidth
[[./screenshot-nerdageddon.png]]

#+latex: \resizebox{\textwidth}{!}{\tiny 
[[https://d6.gnutella2.info/freenet/USK@tiYrPDh~fDeH5V7NZjpp~QuubaHwgks88iwlRXXLLWA,yboLMwX1dChz8fWKjmbdtl38HR5uiCOdIUT86ohUyRg,AQACAAE/nerdageddon/159/][USK@tiYrPDh~fDeH5V7NZjpp~QuubaHwgks88iwlRXXLLWA,yboLMwX1dChz8fWKjmbdtl38HR5uiCOdIUT86ohUyRg,AQACAAE/nerdageddon/159/]]
#+latex: }

\raggedright
/we call them freesites./

** Site creation

\hspace{0.1cm}
[[./screenshot-publish.png]]

***                                                                   :BMCOL:
    :PROPERTIES:
    :BEAMER_col: 0.62
    :END:

jSite (GUI)

***                                                                   :BMCOL:
    :PROPERTIES:
    :BEAMER_col: 0.38
    :END:

[[https://github.com/freenet/lib-pyfreenet][freesitemgr (pyFreenet)]]

** Easier sites: Sharewiki

\hspace{0.1cm}
[[./screenshot-sharewiki.png]]

***                                                                   :BMCOL:
    :PROPERTIES:
    :BEAMER_col: 0.45
    :END:

[[./screenshot-sharewiki-list.png]]

***                                                                   :BMCOL:
    :PROPERTIES:
    :BEAMER_col: 0.45
    :END:

[[./screenshot-sharewiki-backup-and-restore.png]]
** Blogging: Flog Helper

[[./screenshot-floghelper.png]]

** Confidential Messaging

***                                                               :B_columns:
    :PROPERTIES:
    :BEAMER_env: columns
    :END:

**** Darknet messaging                                        :B_block:BMCOL:
    :PROPERTIES:
    :BEAMER_col: 0.45
    :BEAMER_env: block
    :END:

- Talk to friends who run Freenet
- Hide metadata in Freenet traffic

**** with file hosting                                        :B_block:BMCOL:
    :PROPERTIES:
    :BEAMER_col: 0.45
    :BEAMER_env: block
    :END:

- confidential pastebin
- invisible and encrypted \\ like all file uploads \\ before sharing the key

***                                                                   :BMCOL:
    :PROPERTIES:
    :BEAMER_col: 0.97
    :END:

\vspace{0.2cm}

#+attr_latex: :height 0.36\textwidth
[[./screenshot-n2n-list-all-peers.png]]
\hspace{0.1cm}
#+attr_latex: :height 0.36\textwidth
[[./screenshot-n2n-to-multiple-peers.png]]
\hspace{0.1cm}
#+attr_latex: :height 0.36\textwidth
[[./screenshot-n2n-received.png]]

\vspace{0.1cm}
** Email with hidden metadata

#+attr_latex: :width 0.98\textwidth
[[./screenshot-freemail.png]]

** DVCS
#+latex: \scriptsize
#+BEGIN_EXAMPLE
$ cd /tmp
$ hg clone freenet://USK@j2Mfv0b81MNSslh3Qg9gs1vgQj36whsuosP8ydZq158,Xb~vh8XEXmdwGFca4HAx-ILOZD6AWPVuRzIuLerl4PU,AQACAAE/infocalypse-repo.R1/17
Current USK version: 17
Fetching bundles...
...
Pulled bundle: (-1, 0, 1)
...
Pulled bundle: (0, 9, 0)
...
Pulled bundle: (9, 16, 0)

As basic protection, infocalypse automatically set the username
'anonymous' for commits in this repo, changed the commands
`commit` and `ci` to fake UTC time and added `clt` which commits
in the local timezone. To change this, edit
/tmp/freenet-funding/.hg/hgrc
#+END_EXAMPLE

#+latex: \normalsize
*** Mercurial                                                 :B_block:BMCOL:
    :PROPERTIES:
    :BEAMER_col: 0.45
    :BEAMER_env: block
    :END:

- [[http://mercurial.selenic.com/wiki/Infocalypse][infocalypse]]
- [[https://github.com/freenet/pyFreenetHg][pyFreenetHg]] (old)

*** Git                                                       :B_block:BMCOL:
    :PROPERTIES:
    :BEAMER_col: 0.45
    :BEAMER_env: block
    :END:

- [[http://j16sdiz.github.io/egit-freenet/][egit-freenet]]

# infocalypse: freenet development over freenet

# git over freenet
** Microblogging: Sone

[[./screenshot-sone.png]]

** Spam resistance

***                                                               :B_columns:
    :PROPERTIES:
    :BEAMER_env: columns
    :END:
**** Web of Trust                                             :B_block:BMCOL:
    :PROPERTIES:
    :BEAMER_env: block
    :BEAMER_col: 0.45
    :END:

- Propagating trust
- Generalized
- Used by plugins (i.e. Sone)

**** FMS                                                      :B_block:BMCOL:
    :PROPERTIES:
    :BEAMER_env: block
    :BEAMER_col: 0.45
    :END:

- Explicit Trust Lists
- One Shot IDs

*** Shared Properties                                         :B_block:BMCOL:
    :PROPERTIES:
    :BEAMER_env: block
    :BEAMER_col: 0.97
    :END:

- CAPTCHAs for introduction
- Take a while to find existing People

** Web of Trust

[[./screenshot-wot.png]]

\vspace{1cm}

***                                                                   :BMCOL:
    :PROPERTIES:
    :BEAMER_col: 0.6
    :END:

[[./screenshot-wot-create-or-restore.png]]

***                                                                   :BMCOL:
    :PROPERTIES:
    :BEAMER_col: 0.35
    :END:

[[./screenshot-wot-summary.png]]

** Forums: FMS

[[./screenshot-fms.png]]
** Comments on the Clearweb

[[./screenshot-babcom.png]]

/See [[http://draketo.de/proj/freecom][draketo.de/proj/freecom]] and [[http://draketo.de/english/freenet/spam-resistant-decentral-comments][draketo.de/english/freenet/spam-resistant-decentral-comments]]/

** Language Bindings

- Java - in core \\ https://github.com/freenet/fred \\ Plugin Writing: \\ [[https://wiki.freenetproject.org/Plugin_development_tutorial][wiki.freenetproject.org/Plugin_development_tutorial]] \\ Freenet Client Protocol: \\  [[https://wiki.freenetproject.org/FCPv2][wiki.freenetproject.org/FCPv2]]
- Python - pyFreenet \\ https://github.com/freenet/lib-pyFreenet
- Perl*: https://github.com/freenet/lib-perlFreenet
- Ruby*: https://github.com/freenet/lib-rubyFreenet
- Ada*: https://github.com/freenet/lib-AdaFN/


*: I did not test these, yet. I don’t know whether they actually work.

** Application Summary

- Do you miss anything?

- Join us and create it!

** Why not as big as Tor?
***                                                               :B_columns:
    :PROPERTIES:
    :BEAMER_env: columns
    :END:
**** Focus                                                    :B_block:BMCOL:
    :PROPERTIES:
    :BEAMER_col: 0.45
    :BEAMER_env: block
    :END:

#+attr_latex: :width 0.3\textwidth
[[./logo-blurred.png]]
\hspace{0.1cm} \Rightarrow \hspace{0.1cm}
#+attr_latex: :width 0.3\textwidth
[[./logo.png]]

\vspace{0.2cm}

- Hard problems solved, but not polished
- Lots of low hanging fruit

**** Money                                                    :B_block:BMCOL:
    :PROPERTIES:
    :BEAMER_col: 0.45
    :BEAMER_env: block
    :END:

- Freenet: 2 part time developers
- Tor: 20 full time developers

/Tor is military funded. Freenet does not help hack foreign servers. Do the math :)/

*** Fundraising                                               :B_block:BMCOL:
    :PROPERTIES:
    :BEAMER_col: 0.97
    :BEAMER_env: block
    :END:

We try to get more focus and money.
* Tech
** Tech

- capabilities
- routing
- simulation

** About the tech
***                                                               :B_columns:
    :PROPERTIES:
    :BEAMER_env: columns
    :END:
**** Datastore                                                :B_block:BMCOL:
    :PROPERTIES:
    :BEAMER_col: 0.45
    :BEAMER_env: block
    :END:

- *decentralized* \\ on the computers of users
- *encrypted chunks of files* \\ key (URL) to assemble, decrypt and identify
- *anonymous pseudonyms* \\ public/private key publishing
- *lifetime by demand*

**** Routing                                                  :B_block:BMCOL:
    :PROPERTIES:
    :BEAMER_col: 0.45
    :BEAMER_env: block
    :END:

- *small world*: scale free
- *optional friend-to-friend* (Darknet)
- *location*: [0..1) for each file chunk and node
- *find route*: from node to file chunk
- *forward data*: travels along the route

*** Applications                                                    :B_block:
    :PROPERTIES:
    :BEAMER_env: block
    :END:

- *subscribe to keys*: 30s to 30 min round trip time.
- *base for applications*: Websites, Forums, Microblogging, Chat.
- *spam resistance*: Web of Trust (2 implementations).

** Small World Routing

***                                                                   :BMCOL:
    :PROPERTIES:
    :BEAMER_col: 0.57
    :END:

#+caption: Finding the route to a chunk of data. Greedy Routing on Scale Free structure.
[[./freenet-routing.png]]

** Network structure optimization

*** Opennet                                                   :B_block:BMCOL:
    :PROPERTIES:
    :BEAMER_env: block
    :BEAMER_col: 0.45
    :END:

- *Optimize peer-connections* \\ via success-metric
- *Distance Constraint* \\ maximum number of long connections

*** Darknet (friend-to-friend)                                :B_block:BMCOL:
    :PROPERTIES:
    :BEAMER_env: block
    :BEAMER_col: 0.45
    :END:

- *Assume small world* \\ connections to people known in real life
- *Reconstruct* \\ the structure by swapping locations

** Routing Simulation

#+BEGIN_SRC python :tangle routingsim.py :exports none :results output
  import math
  import random
  size = 1000
  locs = [random.random() for i in range(size)]
  outdegree = int(math.log(size, 2))
  backoffprobability = 0.0


  def plotlinklengths(nets, title, filepath=None):
    import numpy
    import pylab
    pylab.clf()
    pylab.figure(figsize=(16,9))
    for net in nets:
        lengths = []
        for node in net:
          for link in net[node]:
            lengths.append(min(abs(link - node), abs(link - node - 1), abs(link - node + 1)))
        pylab.plot(sorted(lengths), numpy.arange(len(lengths))/float(len(lengths)), linewidth=4)
    pylab.xscale("log")
    pylab.xlabel("link length")
    pylab.ylabel("fraction of links with this length or less")
    pylab.title(title)
    pylab.xlim(1./(size**2), 0.5)
    if filepath:
      pylab.savefig(filepath)
    else:
      pylab.show()


  def plotring(locs, paths, title, filepath=None):
    import pylab, numpy
    pylab.clf()
    pylab.figure(figsize=(12,9))
    locs = numpy.array(locs)
    ringx = numpy.sin(locs*math.pi*2)
    ringy = numpy.cos(locs*math.pi*2)
    pylab.scatter(ringx, ringy)# , color=matplotlib.cm.spectral(locs))
    for path in paths:
        path = numpy.array(path)
        pathx = numpy.sin(path*math.pi*2)
        pathy = numpy.cos(path*math.pi*2)
        for n,x in enumerate(pathx):
          try:
            xp1 = pathx[n+1]
            y = pathy[n]
            yp1 = pathy[n+1]
            # color = matplotlib.cm.spectral(locs[n])
          except:
            break
          # pylab.plot([x, xp1], [y, yp1])# , color=color)
        pylab.plot(pathx, pathy, linewidth=2)# , color=color)
    pylab.title(title)
    if filepath:
      pylab.savefig(filepath)
    else:
      pylab.show()


  def step(path, node, peers, target):
    # depth first traversal
    p = set(path)
    untested = [peer for peer in list(peers)
                if not peer in p 
                and random.random() > backoffprobability]
    if not untested:
      if not path[:-1]:
         raise ValueError("No nodes to test and cannot step back: Cannot find a route to the target in this network.")
      # step back
      return path[-2]
    best = sorted(untested, key=lambda peer: abs(peer - target))[0]
    if best == node:
      if not path[:-1]:
         raise ValueError("Cannot find a route to the target in this network.")
      best = path[-2]
    return best


  def randomrouting(locs, start, target, filepath=None):
      path = [start]
      randomnet = {}
      for i in locs:
        peers = set()
        for j in range(outdegree):
          peer = random.choice(locs)
          while peer in peers:
              peer = random.choice(locs)
          peers.add(peer)
        randomnet[i] = list(peers)
      # show random net
      links = []
      for i in randomnet:
        links.append(randomnet[i])
      # route on random net
      while path[-1] != target:
        node = path[-1]
        peers = randomnet[node]
        path.append(step(path, node, peers, target))
      return randomnet, path


  def smallworldrouting(locs, start, target, filepath=None):
      path = [start]
      # small world routing
      smallworldnet = {}
      sortedlocs = sorted(list(locs))
      lensortedlocs = len(sortedlocs)
      linksperhop = max(1, outdegree//3)
      for i in sortedlocs:
          smallworldnet[i] = []
      # know your neighbors
      halfnumshortlinks = max(1, linksperhop/2) + 1
      maxshortdistance = outdegree/2
      for dist in range(halfnumshortlinks):
        for n, i in enumerate(sortedlocs):
          down = min([random.choice(range(maxshortdistance)) for trias in range(3)]) + 1
          up = min([random.choice(range(maxshortdistance)) for trias in range(3)]) + 1
          lower = sortedlocs[(n-down)%lensortedlocs]
          while lower in smallworldnet[i]:
              down += 1
              lower = sortedlocs[(n-down)%lensortedlocs]
          upper = sortedlocs[(n+up)%lensortedlocs]
          while upper in smallworldnet[i]:
              up += 1
              upper = sortedlocs[(n+up)%lensortedlocs]
          smallworldnet[i].append(lower)
          smallworldnet[i].append(upper)
      # long connections
      numlonglinks = linksperhop
      for n, i in enumerate(sortedlocs):
        longlinks = set()
        longlink = random.choice(sortedlocs)
        for l in range(numlonglinks):
          while longlink in longlinks:
            longlink = random.choice(sortedlocs)
          longlinks.add(longlink)
        smallworldnet[i].extend(list(longlinks))
      # as many medium size links as left after substracting the long and short links
      nummediumlinks = outdegree - (halfnumshortlinks*2) - numlonglinks
      maxmediumdistance = max(lensortedlocs/(outdegree*2), outdegree)
      for i in range(nummediumlinks):
        for n, i in enumerate(sortedlocs):
          down = random.choice(range(maxmediumdistance)) + 1
          up = random.choice(range(maxmediumdistance)) + 1
          lower = (n-down)%lensortedlocs
          while lower in smallworldnet[i]:
              down += 1
              lower = sortedlocs[(n-down)%lensortedlocs]
          upper = (n+up)%lensortedlocs
          while upper in smallworldnet[i]:
              up += 1
              upper = sortedlocs[(n+up)%lensortedlocs]
          smallworldnet[i].append(sortedlocs[lower])
          smallworldnet[i].append(sortedlocs[upper])
      # show small world net
      links = []
      for i in smallworldnet:
        links.append(smallworldnet[i])
      # route on small world net
      while path[-1] != target:
        node = path[-1]
        peers = smallworldnet[node]
        path.append(step(path, node, peers, target))
      return smallworldnet, path

  def kleinbergrouting(locs, start, target, filepath=None):
      path = [start]
      # small world routing
      smallworldnet = {}
      sortedlocs = sorted(list(locs))
      lensortedlocs = len(sortedlocs)
      linksperhop = max(1, outdegree//3)
      for i in sortedlocs:
          smallworldnet[i] = []
      # know your neighbors
      halfnumshortlinks = max(1, linksperhop)
      maxshortdistance = 1
      for dist in range(halfnumshortlinks):
        for n, i in enumerate(sortedlocs):
          down = min([random.choice(range(maxshortdistance)) for trias in range(3)]) + 1
          up = min([random.choice(range(maxshortdistance)) for trias in range(3)]) + 1
          lower = sortedlocs[(n-down)%lensortedlocs]
          while lower in smallworldnet[i]:
              down += 1
              lower = sortedlocs[(n-down)%lensortedlocs]
          upper = sortedlocs[(n+up)%lensortedlocs]
          while upper in smallworldnet[i]:
              up += 1
              upper = sortedlocs[(n+up)%lensortedlocs]
          smallworldnet[i].append(lower)
          smallworldnet[i].append(upper)
      # long connections
      numlonglinks = max(1, linksperhop/3)
      for n, i in enumerate(sortedlocs):
        longlinks = set()
        longlink = random.choice(sortedlocs)
        for l in range(numlonglinks):
          while longlink in longlinks:
            longlink = random.choice(sortedlocs)
          longlinks.add(longlink)
        smallworldnet[i].extend(list(longlinks))
      # as many medium size links as left after substracting the long and short links
      nummediumlinks = outdegree - (halfnumshortlinks*2) - numlonglinks
      maxmediumdistance = max(lensortedlocs/(outdegree*2), outdegree)
      for i in range(nummediumlinks):
        for n, i in enumerate(sortedlocs):
          down = random.choice(range(maxmediumdistance)) + 1
          up = random.choice(range(maxmediumdistance)) + 1
          lower = (n-down)%lensortedlocs
          while lower in smallworldnet[i]:
              down += 1
              lower = sortedlocs[(n-down)%lensortedlocs]
          upper = (n+up)%lensortedlocs
          while upper in smallworldnet[i]:
              up += 1
              upper = sortedlocs[(n+up)%lensortedlocs]
          smallworldnet[i].append(sortedlocs[lower])
          smallworldnet[i].append(sortedlocs[upper])
      # show small world net
      links = []
      for i in smallworldnet:
        links.append(smallworldnet[i])
      # route on small world net
      while path[-1] != target:
        node = path[-1]
        peers = smallworldnet[node]
        path.append(step(path, node, peers, target))
      return smallworldnet, path

  randompaths = []
  smallworldpaths = []
  kleinbergpaths = []
  randomnets = []
  smallworldnets = []
  kleinbergnets = []
  for i in range(10):
      target = random.choice(locs)
      start = random.choice(locs)
      randomnet, randompath = randomrouting(locs, start, target)
      smallworldnet, smallworldpath = smallworldrouting(locs, start, target)
      kleinbergnet, kleinbergpath = kleinbergrouting(locs, start, target)
      randompaths.append(randompath)
      smallworldpaths.append(smallworldpath)
      kleinbergpaths.append(kleinbergpath)
      randomnets.append(randomnet)
      smallworldnets.append(smallworldnet)
      kleinbergnets.append(kleinbergnet)

  randompathlens = [len(p) for p in randompaths]
  smallworldpathlens = [len(p) for p in smallworldpaths]
  kleinbergpathlens = [len(p) for p in kleinbergpaths]

  print "random:", randompathlens
  print "small world:", smallworldpathlens
  print "Kleinberg:", kleinbergpathlens

  import numpy
  plotlinklengths(randomnets+smallworldnets+kleinbergnets, "Link lengths", 
           filepath="size-{}-peers-{}-backoffpercentage-{:03}-hash-{}-linklengths.png".format(
             len(locs), outdegree, int(100*backoffprobability), hash(tuple(locs))))
  plotring(locs, randompaths, "random paths", 
           filepath="size-{}-peers-{}-backoffpercentage-{:03}-hash-{}-meanlen-{}-random.png".format(
             len(locs), outdegree, int(100*backoffprobability), hash(tuple(locs)), int(numpy.mean(randompathlens))))
  plotring(locs, smallworldpaths, "small world paths", 
           filepath="size-{}-peers-{}-backoffpercentage-{:03}-hash-{}-meanlen-{}-smallworld.png".format(
             len(locs), outdegree, int(100*backoffprobability), hash(tuple(locs)), int(numpy.mean(smallworldpathlens))))
  plotring(locs, kleinbergpaths, "small world paths", 
           filepath="size-{}-peers-{}-backoffpercentage-{:03}-hash-{}-meanlen-{}-kleinberg.png".format(
             len(locs), outdegree, int(100*backoffprobability), hash(tuple(locs)), int(numpy.mean(kleinbergpathlens))))

#+END_SRC

#+RESULTS:
: random: [284, 140, 181, 23, 87, 241, 222, 157, 38, 128]
: small world: [8, 5, 4, 12, 7, 5, 7, 3, 7, 5]
: Kleinberg: [8, 4, 10, 7, 12, 11, 5, 5, 9, 6]


*** Random Routing                                            :B_block:BMCOL:
    :PROPERTIES:
    :BEAMER_col: 0.45
    :BEAMER_env: block
    :END:

#+caption: 10 paths between locations on a random network with 1000 nodes. Average path length: 105.
[[./size-1000-peers-9-backoffpercentage-000-hash-8675903025370220578-meanlen-105-random.png]]

*** Small World Routing                                       :B_block:BMCOL:
    :PROPERTIES:
    :BEAMER_env: block
    :BEAMER_col: 0.45
    :END:

#+caption: 10 paths between locations on a small world network with 1000 nodes. Average path length: 5.
[[./size-1000-peers-9-backoffpercentage-000-hash-8675903025370220578-meanlen-5-smallworld.png]]


** Link lengths in the Simulations

#+caption: Link length distribution in the simulated small world and random networks.
[[./size-1000-peers-9-backoffpercentage-000-hash-8675903025370220578-linklengths.png]]

** Measured Network Structure

#+caption: Link length distribution in Freenet. The green line would be an ideal network. Blue would be a random network. Red is the measured distribution. Randomization from local requests, churn and inhomogenity in the network skew the distribution.
#+attr_latex: :width 0.7\textwidth
[[./607-plot_link_length.png]]
** Additional notes
***                                                               :B_columns:
    :PROPERTIES:
    :BEAMER_env: columns
    :END:
**** Performance                                              :B_block:BMCOL:
    :PROPERTIES:
    :BEAMER_env: block
    :BEAMER_col: 0.45
    :END:

- Upload 150 MiB in 1 day
- Download 1 GiB in 1 day

/With max bandwidth set to 80kBps and average 50-60kBps./

**** Optimizations                                            :B_block:BMCOL:
    :PROPERTIES:
    :BEAMER_env: block
    :BEAMER_col: 0.45
    :END:

- FOAF routing
- Caching
- ...

/Missing in the simulation./

*** Capacity                                                  :B_block:BMCOL:
    :PROPERTIES:
    :BEAMER_env: block
    :BEAMER_col: 0.97
    :END:
#+attr_latex: :width \textwidth
[[./year_900x300_plot_datastore.png]]

** Tech Summary

- Small World Structure
- Measured fits simulated
- It scales

** Summary

#+BEGIN_QUOTE
Freenet is the technical part of the solution for freedom of the press in the internet.
#+END_QUOTE

- Decentral, anonymous datastore.
- Many applications.
- Started in 2000.
- Scales.

\vspace{0.5cm}

*** Fundraising                                               :B_block:BMCOL:
    :PROPERTIES:
    :BEAMER_env: block
    :BEAMER_col: 0.97
    :END:

We want to raise money to make Freenet perfect for Journalists.

/Info: [[http://draketo.de/proj/freenet-funding][draketo.de/proj/freenet-funding]]/

** Get Freenet!

***                                                                   :BMCOL:
    :PROPERTIES:
    :BEAMER_col: 0.62
    :END:

\centering

\Huge

[[./logo.png]]

*[[https://freenetproject.org][freenetproject.org]]*

\vspace{0.4cm}

\scriptsize

/This presentation: [[https://github.com/ArneBab/freenet-fundraising][github.com/ArneBab/freenet-fundraising]]/

/Donate: [[https://freenetproject.org/donate.html][freenetproject.org/donate.html]] \\ Bitcoin: \href{bitcoin:1966U1pjj15tLxPXZ19U48c99EJDkdXeqb}{1966U1pjj15tLxPXZ19U48c99EJDkdXeqb}/
* Appendix
\appendix
* Contribute
** Contribute
***                                                                   :BMCOL:
    :PROPERTIES:
    :BEAMER_col: 0.45
    :END:

- Write Code
- Run a Node

***                                                                   :BMCOL:
    :PROPERTIES:
    :BEAMER_col: 0.45
    :END:

- Build the Darknet
- Spread the Word

** Write Code

- https://github.com/freenet 
- https://freenetproject.org/developer.html
- IRC: #freenet @ irc.freenode.net

** Run a node

*** Running a Node                                                  :B_block:
    :PROPERTIES:
    :BEAMER_env: block
    :END:
\scriptsize
#+BEGIN_SRC sh
wget https://freenetproject.org/jnlp/freenet_installer.jar -O installer.jar
java -jar installer.jar -console
# (follow the prompts)
# info: https://freenetproject.org/download.html
./run.sh # { console | start | stop | restart | status | dump }
#+END_SRC

*** As Seednode                                                     :B_block:
    :PROPERTIES:
    :BEAMER_env: block
    :END:

\centering

simple howto found on 

https://piratenpad.de/p/pirates4freenet

** Build the Darknet
#+attr_latex: :width \textwidth
[[./screenshot-add-friend.png]]

** Spread the Word

\centering
Because /we/ are crappy at PR.

These slides: 

[[http://draketo.de/proj/freenet-funding/slides.pdf][draketo.de/proj/freenet-funding/slides.pdf]]

[[https://github.com/ArneBab/freenet-fundraising][github.com/ArneBab/freenet-fundraising]]

** Summary

***                                                                   :BMCOL:
    :PROPERTIES:
    :BEAMER_col: 0.45
    :END:

- Write Code
- Run a Node

***                                                                   :BMCOL:
    :PROPERTIES:
    :BEAMER_col: 0.45
    :END:

- Build the Darknet
- Spread the Word

* Fundraising
** Fundraising
- Goal
- What we need
- 2 year vision
** Goal: Journalists and Whistleblowers

- maintain journalist site
- contact a journalist via the site
- traceless persistent pseudonym (QR or written key)
- Freenet-stick, preseeded
- invisible darknet (steganography)
- grow the darknet over mobile

** What we need

***                                                               :B_columns:
    :PROPERTIES:
    :BEAMER_env: columns
    :END:
**** Minimal                                                  :B_block:BMCOL:
    :PROPERTIES:
    :BEAMER_env: block
    :BEAMER_col: 0.3
    :END:

- 2 coders \\ one part time
- 1 outreach
- 1 coordinator and coder
- 2 years
- 620k Euro

**** Good                                                     :B_block:BMCOL:
    :PROPERTIES:
    :BEAMER_env: block
    :BEAMER_col: 0.3
    :END:

- 2 coders
- 1 UX
- 1 outreach
- 1 coordinator
- 3 years
- 1.5M Euro

**** Ideal                                                    :B_block:BMCOL:
    :PROPERTIES:
    :BEAMER_env: block
    :BEAMER_col: 0.3
    :END:

- 3 coders
- 2 UX
- 2 outreach
- 1 coordinator
- 5 years
- 3.8M Euro

***                                                                 :B_block:
    :PROPERTIES:
    :BEAMER_env: block
    :END:

If you are in contact with human rights groups who might want to fund us, please get in touch!

** 2 year vision
***                                                               :B_columns:
    :PROPERTIES:
    :BEAMER_env: columns
    :END:
**** Nick, Journalist                                         :B_block:BMCOL:
    :PROPERTIES:
    :BEAMER_env: block
    :BEAMER_col: 0.45
    :END:

- Republish on Freenet
- Email from Janice
- Ask to verify the leak
- Help her keep out of trouble
- Run the story

**** Janice, Whistleblower                                    :B_block:BMCOL:
    :PROPERTIES:
    :BEAMER_env: block
    :BEAMER_col: 0.45
    :END:

- Use Freenet in cafés
- Select Nick by site
- Send leaked documents
- Reply to questions
- Lie Low
- Leak again

***                                                           :B_block:BMCOL:
    :PROPERTIES:
    :BEAMER_col: 0.97
    :BEAMER_env: block
    :END:

/All already possible, but not easy./

** Going further

***                                                               :B_columns:
    :PROPERTIES:
    :BEAMER_env: columns
    :END:
**** publication and collaboration:          :B_block:BMCOL:
     :PROPERTIES:
     :BEAMER_col: 0.45
     :BEAMER_env: block
     :END:

   - platform for political bloggers
   - social network with privacy by design
   - programming platform

**** backend for the web:                                     :B_block:BMCOL:
     :PROPERTIES:
     :BEAMER_col: 0.45
     :BEAMER_env: block
     :END:

   - comment system for websites
   - exchanging files with friends

*** harder to detect and block:                               :B_block:BMCOL:
    :PROPERTIES:
    :BEAMER_col: 0.97
    :BEAMER_env: block
    :END:

  - hide data in VoIP stream
  - hiding data in email attachments
  - pre-filled USB-sticks to exchange with collegues and friends
  - … and many more - see [[https://wiki.freenetproject.org/Steganography][Steganography]]

** What is in it for me?

***                                                               :B_columns:
    :PROPERTIES:
    :BEAMER_env: columns
    :END:
**** Secure Environment                                       :B_block:BMCOL:
    :PROPERTIES:
    :BEAMER_env: block
    :BEAMER_col: 0.45
    :END:
If it’s safe enough for whistleblowers, it’s safe enough to give you privacy.

**** Hide in the Forest                                       :B_block:BMCOL:
    :PROPERTIES:
    :BEAMER_env: block
    :BEAMER_col: 0.45
    :END:
The more people use Freenet, the safer it gets for everyone. Bigger anonymity set.

*** Privacy by Default                                        :B_block:BMCOL:
    :PROPERTIES:
    :BEAMER_env: block
    :BEAMER_col: 0.97
    :END:
Easy enough for everyday communication. Journalists need that.

** Fundraising Summary

- Freenet for Journalists and Whistleblowers
- Already possible but not easy
- Finance a group of full time Freenet hackers
- 3-8 people, 2-5 years
- 620k Euro to 3.8M Euro
** Get Freenet!

***                                                                   :BMCOL:
    :PROPERTIES:
    :BEAMER_col: 0.62
    :END:

\centering

\Huge

[[./logo.png]]

*[[https://freenetproject.org][freenetproject.org]]*

\vspace{0.4cm}

\scriptsize

/This presentation: [[https://github.com/ArneBab/freenet-fundraising][github.com/ArneBab/freenet-fundraising]]/

/Donate: [[https://freenetproject.org/donate.html][freenetproject.org/donate.html]] \\ Bitcoin: \href{bitcoin:1966U1pjj15tLxPXZ19U48c99EJDkdXeqb}{1966U1pjj15tLxPXZ19U48c99EJDkdXeqb}/
